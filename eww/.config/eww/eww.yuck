(defvar eww "/home/giapwibu/eww/target/release/eww")
(include "music/music.yuck")
(include "background/background.yuck")
(include "control/control.yuck")

(defwindow bar
            :class "bar"
            :monitor 0
            :geometry (geometry :x "1%"
                               :y "0%"
                               :width 80
                               :height "65%"
                               :anchor "left center")
            :stacking "fg"
            :exclusive true 
            :focursable true 
            (box :orientation "vertical"
                (workspaces1 :monitor "eDP-1")

                (box
                    :space-evenly "false"
                    :orientation "vertical"
                    :valign "end"
                    (volume)
                    (bright)
                    (phone)
                    (time-date)
                )
            )
  )

; ================== workspace ==============================
(deflisten workspaces :initial '{\"DP-2\": [], \"HDMI-A-1\": [], \"eDP-1\": []}' "./scripts/workspace.py")

(defwidget workspaces1 [monitor]
    (box  
        :orientation "vertical" 
        :class "workspaces1"
        :valign "start"
    (for wsp in {workspaces[monitor]}
        (button :class "workspace"
              :onclick "hyprctl dispatch workspace ${wsp.name}"
        (box
          (label :class "icon" :text "${wsp.icon}")
          (label :class "name" :text "${wsp.name}"))
        ))))

; ================== volum ==================================
(defpoll volumevalue :interval "1s" "scripts/getvolume.sh")
(defvar setvolum false)
(defwidget volume []
	(eventbox
        :class "eventbox"
        :onhover "${eww} update setvolum=true"	
		:onhoverlost "${eww} update setvolum=false"
	    (box
            :orientation "vertical"
            :space-evenly "false"
            (revealer
                :transition "slideup"
                :reveal setvolum
                :duration "550ms"
                (scale 
                    :class "volume"
                    :value volumevalue
                    :orientation "vertical"
                    :flipped true
                    :tooltip "Volume: ${volumevalue}%"
                    :max 101
                    :min 0
                    :onchange "pactl set-sink-volume @DEFAULT_SINK@ {}%"
                )
            )
            (button
                :class "volumeicon"
                "VOL"
            )
        )
    )
)

; ================== bright ==================================
(defpoll brightvalue :interval "1s" "scripts/getbrightness.sh")
(defvar setbright false)
(defwidget bright []
	(eventbox
        :onhover "${eww} update setbright=true"	
		:onhoverlost "${eww} update setbright=false"
	    (box 
            :orientation "vertical"
            :space-evenly "false"
            (revealer
                :transition "slideup"
                :reveal setbright
                :duration "550ms"
                (scale 
                    :class "volume"
                    :value brightvalue
                    :orientation "vertical"
                    :flipped true
                    :tooltip "Bright: ${brightvalue}%"
                    :max 100
                    :min 10
                    :onchange "brightnessctl set {}%"
                )
            )
            (button
                :class "volumeicon"
             "BRIGHT"
            )
        )
    )
)
; ================== time date ==============================
(defwidget time-date [] 
    (box 
        :orientation "vertical"
        (box
            (button
                :class "time"
                :onclick "hyprctl notify 5 10000 'rgb(ff1ea3)' 'Hello everyone!'" time))
        (box
            :orientation "vertical"
            (button 
                :class "date"
                date
            )
)))

(defpoll time :interval "10s"
    "date '+%H:%M'")
(defpoll date :interval "3600s"
    "date '+%b %d'")

(defwidget cpu []
    (box "${EWW_RAM.used_mem_perc}%"))


; ================== time date ==============================
(defwidget phone []
    (button 
        :class "volumeicon"
        :onclick "scripts/phone.sh"
        "PHONE"
    )
)
